<project_overview>
This project is a Python-based MCP (Model Context Protocol) server designed to support an AI-assistant system for the BIP Portal of Bannari Amman Institute of Technology. The MCP server serves as a backend component that handles **AI-prompt orchestration**, **context resolution**, and **user-specific completions** by leveraging mock BIP portal data and authenticated requests via OAuth tokens.

The goal is to create a modular, testable, and production-ready FastAPI server that exposes REST APIs used by the frontend and other services.

The project directory is structured as a **monorepo**:

apps/
  api/    ← backend for website (not part of this project)
  web/    ← frontend (not part of this project)

packages/
  mcp_server/ ← this is where all your work must happen

package.json

packages/
  bip-extension/ ← Chrome extension to send BIP session to MCP server
</project_overview>

<project_mission>
Build a FastAPI-powered MCP server that:
- Authenticates using Google OAuth2 (validates Bearer tokens)
- Resolves student-specific context from the BIP portal (via mock data for now)
- Accepts prompts + context, and returns AI-generated completions
- Serves as an AI backend that enables intelligent, personalized, and secure functionality for the BIP frontend
</project_mission>

<tech_stack>
- Language: Python 3.11+
- Framework: FastAPI
- Auth: Google OAuth2 Bearer token verification
- Structure: Modular architecture using routers, services, and auth
- No DB: Use mocked data sources initially
- Deployment ready: All code should be clean, documented, and testable
</tech_stack>

<directory_expectations>
All code you generate must go under:

`packages/mcp_server/`

Structure it like this:
- `main.py`: FastAPI app bootstrap
- `routers/`: All API route definitions
- `services/`: Core logic like context resolution and prompt handling
- `auth/`: Google OAuth token validation logic
- `tests/`: Unit tests (especially for services)

Do not write code in `apps/api/` or `apps/web/`.
</directory_expectations>

<expected_endpoints>
1. `GET /api/contextual?student_id=...`
   - Fetches contextual academic/user data for that student (mock data only)

2. `POST /api/prompt`
   - Accepts a prompt and optional context payload
   - Returns a completed AI response (can be stubbed initially)

All endpoints require valid `Authorization: Bearer <token>` headers.
</expected_endpoints>

<key_guidelines>
- Token verification must be done using Google’s public keys (JWKS)
- Student context is mocked using a local JSON file or Python dictionary
- The `prompt` endpoint simulates LLM completions—use placeholder logic or simple rules
- Code must include proper documentation, type hints, and error handling
- Every function must be testable; write unit tests for service logic
</key_guidelines>

<responsibilities_of_cline_ai>
You are responsible for:
- Writing the server in full, step by step, one logical block at a time
- Keeping the project memory **accurate and updated**
- If the user ever changes the project structure, tech stack, or functionality:
  → You must **update this memory_bank prompt** to reflect those changes

This memory_bank must stay **fully in sync** with the actual project reality at all times.

Whenever a new file, route, service, or spec is added, be proactive and modify this memory accordingly.

When unsure, ask clarifying questions or review existing code.
</responsibilities_of_cline_ai>

<future_expansion_note>
Once the MVP is complete with stubbed context and prompt logic, the user intends to:
- Integrate real BIP portal data securely via authorized APIs
- Replace stubbed AI responses with real LLM completions (e.g., OpenAI API)
- Possibly add Redis/Mongo for context caching and persistence
</future_expansion_note>

<summary>
Your job is to help build an intelligent, extensible backend AI-assistant server with secure access, clear logic, and adaptable design. This memory_bank is your source of truth. Maintain it diligently and update it as the project evolves.
</summary>

<bip_extension_overview>
The `bip-extension` is a Chrome browser extension designed to capture session information from the Bannari Amman Institute of Technology's BIP portal (`https://bip.bitsathy.ac.in/`) and send it to the MCP server.

**Purpose:**
- To provide the MCP server with the necessary session context (cookies) from the BIP portal. This allows the MCP server to potentially make authenticated requests to the BIP portal on behalf of the user or use session details to personalize responses.

**Key Files & Responsibilities:**
- `manifest.json`:
    - Defines the extension's permissions (cookies, storage, activeTab, declarativeNetRequest), host permissions for `https://bip.bitsathy.ac.in/*`.
    - Registers the background service worker (`background.js`).
    - Defines the browser action popup (`popup.html`).
    - Registers a content script (`content_script.js`) to run on BIP portal pages.
- `background.js`:
    - Listens for tab updates on the BIP portal.
    - When a BIP portal tab is fully loaded, it attempts to retrieve `bip_session`, `XSRF-TOKEN`, `wiki_wiki_UserName`, and `wiki_wiki_UserID` cookies.
    - Sends these cookies in a JSON payload to the MCP server endpoint: `http://localhost:8000/bip/session/bip` via a POST request.
    - Updates the extension badge to 'OK' on success or 'ERR' on failure.
    - Includes logic for a manual trigger via `chrome.action.onClicked` and a potential message listener for `MANUAL_SYNC_REQUEST` from the popup.
- `content_script.js`:
    - Currently logs a message to the console.
    - Contains commented-out example code for accessing `sessionStorage` (e.g., for `XSRF-TOKEN`) and sending it to `background.js` via `chrome.runtime.sendMessage`. This is not actively used.
- `popup.html`:
    - Provides a simple UI with a status message and a "Manual Sync" button.
- `popup.js`:
    - Handles the "Manual Sync" button click.
    - Attempts to send a `MANUAL_SYNC_REQUEST` message to `background.js` to trigger the cookie fetching and sending process.
    - Displays basic status updates in the popup.

**Interaction with MCP Server:**
- The extension sends a POST request to `http://localhost:8000/bip/session/bip` (defined in `background.js` as `MCP_SERVER_ENDPOINT`).
- The request body is a JSON object containing the extracted cookies:
  ```json
  {
    "bip_session_cookie": "...",
    "xsrf_token_cookie": "...",
    "wiki_user_name_cookie": "...",
    "wiki_user_id_cookie": "..."
  }
  ```
- The MCP server is expected to have an endpoint at `/bip/session/bip` to receive this data. This endpoint is implemented in `packages/mcp_server/routes/bip_routes.py` and uses the `BipSessionData` model from `packages/mcp_server/models/bip_models.py`.
</bip_extension_overview>
